# Generated by Django 5.2 on 2025-09-18 21:47

import core.models.core
import dirtyfields.dirtyfields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0010_multitenantcompany_active_and_more'),
        ('imports_exports', '0019_auto_20250917_1103'),
        ('products', '0022_alter_producttranslation_language'),
        ('properties', '0016_alter_productpropertytexttranslation_language_and_more'),
        ('sales_channels', '0040_remove_remoteproduct_unique_remote_sku_per_channel_if_present_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AmazonCategory',
            fields=[
                ('remotecategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remotecategory')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remotecategory',),
        ),
        migrations.CreateModel(
            name='AmazonEanCode',
            fields=[
                ('remoteeancode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteeancode')),
            ],
            options={
                'verbose_name': 'Amazon EAN Code',
                'verbose_name_plural': 'Amazon EAN Codes',
            },
            bases=('sales_channels.remoteeancode',),
        ),
        migrations.CreateModel(
            name='AmazonImageProductAssociation',
            fields=[
                ('remoteimageproductassociation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteimageproductassociation')),
                ('imported_url', models.URLField(blank=True, help_text='Original URL of the image when imported from Amazon.', max_length=1024, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteimageproductassociation',),
        ),
        migrations.CreateModel(
            name='AmazonInventory',
            fields=[
                ('remoteinventory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteinventory')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteinventory',),
        ),
        migrations.CreateModel(
            name='AmazonOrder',
            fields=[
                ('remoteorder_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteorder')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteorder',),
        ),
        migrations.CreateModel(
            name='AmazonOrderItem',
            fields=[
                ('remoteorderitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteorderitem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteorderitem',),
        ),
        migrations.CreateModel(
            name='AmazonPrice',
            fields=[
                ('remoteprice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteprice')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteprice',),
        ),
        migrations.CreateModel(
            name='AmazonProduct',
            fields=[
                ('remoteproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteproduct')),
                ('created_marketplaces', models.JSONField(blank=True, default=list, help_text='List of Amazon marketplace IDs where the product was created.')),
                ('ean_code', models.CharField(blank=True, help_text='EAN code used when the product was first created.', max_length=14, null=True)),
                ('product_owner', models.BooleanField(default=False, help_text='Indicates if this listing was created by us and we can manage listing level data.')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Timestamp of the last sync with Amazon.', null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteproduct',),
        ),
        migrations.CreateModel(
            name='AmazonProductContent',
            fields=[
                ('remoteproductcontent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteproductcontent')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remoteproductcontent',),
        ),
        migrations.CreateModel(
            name='AmazonProperty',
            fields=[
                ('remoteproperty_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteproperty')),
                ('code', models.CharField(help_text='The attribute code used in Amazon for this property.', max_length=255, verbose_name='Attribute Code')),
                ('main_code', models.CharField(blank=True, help_text="The main attribute code (part before '__').", max_length=255)),
                ('name', models.CharField(blank=True, help_text="The display label for the remote value (e.g., 'Red').", max_length=255, null=True, verbose_name='Remote Name')),
                ('allows_unmapped_values', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('INT', 'Integer'), ('FLOAT', 'Float'), ('TEXT', 'Text'), ('DESCRIPTION', 'Description'), ('BOOLEAN', 'Boolean'), ('DATE', 'Date'), ('DATETIME', 'Date time'), ('SELECT', 'Select'), ('MULTISELECT', 'Multi Select')], default='TEXT', max_length=16)),
            ],
            options={
                'verbose_name': 'Amazon Property',
                'verbose_name_plural': 'Amazon Properties',
            },
            bases=('sales_channels.remoteproperty',),
        ),
        migrations.CreateModel(
            name='AmazonRemoteLog',
            fields=[
                ('remotelog_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remotelog')),
                ('submission_id', models.CharField(blank=True, max_length=255, null=True)),
                ('issues', models.JSONField(blank=True, null=True)),
                ('processing_status', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'Amazon Remote Log',
                'verbose_name_plural': 'Amazon Remote Logs',
                'ordering': ['-created_at'],
            },
            bases=('sales_channels.remotelog',),
        ),
        migrations.CreateModel(
            name='AmazonSalesChannel',
            fields=[
                ('saleschannel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.saleschannel')),
                ('remote_id', models.CharField(blank=True, help_text='Selling Partner ID (merchant ID) for Amazon SP-API.', max_length=64, null=True, unique=True)),
                ('refresh_token', models.CharField(blank=True, help_text='Refresh token used to generate new access tokens.', max_length=512, null=True)),
                ('refresh_token_expiration', models.DateTimeField(blank=True, help_text='When the refresh token will expire (typically 1 year).', null=True)),
                ('access_token', models.CharField(blank=True, help_text='Access token for API requests.', max_length=512, null=True)),
                ('expiration_date', models.DateTimeField(blank=True, help_text='Expiration datetime of the access token.', null=True)),
                ('state', models.CharField(blank=True, help_text='Unique state used for OAuth verification', max_length=64, null=True, unique=True)),
                ('country', models.CharField(blank=True, choices=[('CA', 'Canada'), ('US', 'United States'), ('MX', 'Mexico'), ('BR', 'Brazil'), ('IE', 'Ireland'), ('ES', 'Spain'), ('GB', 'United Kingdom'), ('FR', 'France'), ('BE', 'Belgium'), ('NL', 'Netherlands'), ('DE', 'Germany'), ('IT', 'Italy'), ('SE', 'Sweden'), ('ZA', 'South Africa'), ('PL', 'Poland'), ('EG', 'Egypt'), ('TR', 'Turkey'), ('SA', 'Saudi Arabia'), ('AE', 'United Arab Emirates'), ('IN', 'India'), ('SG', 'Singapore'), ('AU', 'Australia'), ('JP', 'Japan')], help_text='Country code for Seller Central domain.', max_length=2, null=True)),
                ('region', models.CharField(blank=True, choices=[('NA', 'North America'), ('EU', 'Europe'), ('FE', 'Far East')], help_text='Amazon region of this store.', max_length=2, null=True)),
                ('connection_error', models.TextField(blank=True, help_text='Stores the last OAuth connection failure traceback.', null=True)),
            ],
            options={
                'verbose_name': 'Amazon Sales Channel',
                'verbose_name_plural': 'Amazon Sales Channels',
            },
            bases=('sales_channels.saleschannel',),
        ),
        migrations.CreateModel(
            name='AmazonSalesChannelImport',
            fields=[
                ('saleschannelimport_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.saleschannelimport')),
                ('type', models.CharField(choices=[('schema', 'Schema'), ('products', 'Products')], max_length=32)),
            ],
            options={
                'verbose_name': 'Amazon Sales Channel Import',
                'verbose_name_plural': 'Amazon Sales Channel Imports',
            },
            bases=('sales_channels.saleschannelimport',),
        ),
        migrations.CreateModel(
            name='AmazonSalesChannelView',
            fields=[
                ('saleschannelview_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.saleschannelview')),
                ('api_region_code', models.CharField(blank=True, max_length=255, null=True)),
                ('is_default', models.BooleanField(default=False, help_text='Marks the default marketplace for this Amazon store.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.saleschannelview',),
        ),
        migrations.CreateModel(
            name='AmazonTaxCode',
            fields=[
                ('remotevat_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remotevat')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remotevat',),
        ),
        migrations.CreateModel(
            name='AmazonImportBrokenRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('record', models.JSONField(blank=True, help_text='Store broken record that failed during import.')),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('import_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amazon_import_broken_records', to='imports_exports.import')),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
            ],
            options={
                'verbose_name': 'Amazon Import Broken Record',
                'verbose_name_plural': 'Amazon Import Broken Records',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(blank=True, help_text='ID of the object in the remote system', max_length=255, null=True)),
                ('successfully_created', models.BooleanField(default=True, help_text='Indicates if the object was successfully created in the remote system.')),
                ('outdated', models.BooleanField(default=False, help_text='Indicates if the remote product is outdated due to an error.')),
                ('outdated_since', models.DateTimeField(blank=True, help_text='Timestamp indicating when the object became outdated.', null=True)),
                ('product_type_code', models.CharField(help_text='The Amazon product type code (e.g., TOYS_AND_GAMES, CLOTHING).', max_length=256, null=True, verbose_name='Category Code')),
                ('name', models.CharField(blank=True, help_text="Display name for the Amazon product type (e.g., 'Toys & Games').", max_length=255, null=True, verbose_name='Remote Name')),
                ('imported', models.BooleanField(default=True)),
                ('variation_themes', models.JSONField(blank=True, null=True)),
                ('listing_offer_required_properties', models.JSONField(blank=True, default=dict)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('local_instance', models.ForeignKey(help_text='The local ProductPropertiesRule associated with this Amazon product type.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.productpropertiesrule')),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
            ],
            options={
                'verbose_name': 'Amazon Product Type',
                'verbose_name_plural': 'Amazon Product Types',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonProductTypeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(blank=True, help_text='ID of the object in the remote system', max_length=255, null=True)),
                ('successfully_created', models.BooleanField(default=True, help_text='Indicates if the object was successfully created in the remote system.')),
                ('outdated', models.BooleanField(default=False, help_text='Indicates if the remote product is outdated due to an error.')),
                ('outdated_since', models.DateTimeField(blank=True, help_text='Timestamp indicating when the object became outdated.', null=True)),
                ('remote_type', models.CharField(choices=[('REQUIRED_IN_CONFIGURATOR', 'Required in Configurator'), ('OPTIONAL_IN_CONFIGURATOR', 'Optional in Configurator'), ('REQUIRED', 'Required'), ('OPTIONAL', 'Optional')], help_text='The type of requirement in Amazon.', max_length=32, null=True)),
                ('amazon_rule', models.ForeignKey(help_text='The Amazon product type to which this item belongs.', on_delete=django.db.models.deletion.CASCADE, to='amazon.amazonproducttype')),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('local_instance', models.ForeignKey(help_text='The local ProductPropertiesRuleItem associated with this Amazon product type item.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.productpropertiesruleitem')),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
                ('remote_property', models.ForeignKey(help_text='The AmazonProperty associated with this product type item.', on_delete=django.db.models.deletion.CASCADE, to='amazon.amazonproperty')),
            ],
            options={
                'verbose_name': 'Amazon Product Type Item',
                'verbose_name_plural': 'Amazon Product Type Items',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonPropertySelectValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(blank=True, help_text='ID of the object in the remote system', max_length=255, null=True)),
                ('successfully_created', models.BooleanField(default=True, help_text='Indicates if the object was successfully created in the remote system.')),
                ('outdated', models.BooleanField(default=False, help_text='Indicates if the remote product is outdated due to an error.')),
                ('outdated_since', models.DateTimeField(blank=True, help_text='Timestamp indicating when the object became outdated.', null=True)),
                ('remote_value', models.CharField(help_text="The raw value from Amazon, in the marketplace's locale.", max_length=512)),
                ('remote_name', models.CharField(blank=True, help_text='The display name of the value in the given locale.', max_length=512, null=True)),
                ('translated_remote_name', models.CharField(blank=True, help_text='Remote name translated into the company language.', max_length=512, null=True)),
                ('amazon_property', models.ForeignKey(help_text='The Amazon property this value belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='select_values', to='amazon.amazonproperty')),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('local_instance', models.ForeignKey(blank=True, help_text='Optional link to local PropertySelectValue.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.propertyselectvalue')),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
                ('marketplace', models.ForeignKey(help_text='The Amazon marketplace for this value.', on_delete=django.db.models.deletion.CASCADE, to='amazon.amazonsaleschannelview')),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonProductProperty',
            fields=[
                ('remoteproductproperty_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remoteproductproperty')),
                ('remote_select_value', models.ForeignKey(blank=True, help_text='Reference to the remote select value if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_properties', to='amazon.amazonpropertyselectvalue')),
                ('remote_select_values', models.ManyToManyField(blank=True, help_text='References to remote select values for multiselect properties.', related_name='product_properties_multi', to='amazon.amazonpropertyselectvalue')),
            ],
            options={
                'verbose_name_plural': 'Amazon Product Properties',
            },
            bases=('sales_channels.remoteproductproperty',),
        ),
        migrations.CreateModel(
            name='AmazonPublicDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('api_region_code', models.CharField(max_length=8)),
                ('product_type_code', models.CharField(max_length=64)),
                ('code', models.CharField(max_length=128)),
                ('name', models.CharField(max_length=255)),
                ('raw_schema', models.JSONField(blank=True, null=True)),
                ('usage_definition', models.TextField(help_text='Template for rendering this attribute into SP-API payload.\nTokens: %value%, %unit:weight%, %key:battery__cell_composition%, %marketplace_id%, %language_tag%')),
                ('export_definition', models.JSONField(blank=True, null=True)),
                ('last_fetched', models.DateTimeField(blank=True, null=True)),
                ('is_required', models.BooleanField(default=False)),
                ('is_internal', models.BooleanField(default=False)),
                ('allowed_in_configurator', models.BooleanField(default=False)),
                ('allowed_in_listing_offer_request', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Amazon Public Definition',
                'verbose_name_plural': 'Amazon Public Definitions',
                'indexes': [models.Index(fields=['api_region_code'], name='amazon_amaz_api_reg_df153a_idx'), models.Index(fields=['product_type_code'], name='amazon_amaz_product_ea0817_idx')],
                'unique_together': {('api_region_code', 'product_type_code', 'code')},
            },
        ),
        migrations.CreateModel(
            name='AmazonRemoteLanguage',
            fields=[
                ('remotelanguage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remotelanguage')),
                ('sales_channel_view', models.ForeignKey(blank=True, help_text='The marketplace associated with this remote language.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='remote_languages', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remotelanguage',),
        ),
        migrations.CreateModel(
            name='AmazonProductIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('severity', models.CharField(blank=True, max_length=255, null=True)),
                ('is_validation_issue', models.BooleanField(default=False)),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('remote_product', models.ForeignKey(help_text='The Amazon remote product this issue refers to.', on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='amazon.amazonproduct')),
                ('view', models.ForeignKey(help_text='The Amazon marketplace where the issue was found.', on_delete=django.db.models.deletion.CASCADE, related_name='product_issues', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon Product Issue',
                'verbose_name_plural': 'Amazon Product Issues',
                'ordering': ('remote_product_id', 'view_id'),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonImportData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amazon_import_data', to='products.product')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='import_data', to='amazon.amazonsaleschannel')),
                ('view', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='import_data', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon Import Data',
                'verbose_name_plural': 'Amazon Import Data',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonGtinExemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.BooleanField(default=False)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(help_text='The product this exemption belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='amazon_gtin_exemptions', to='products.product')),
                ('view', models.ForeignKey(help_text='Marketplace for this exemption.', on_delete=django.db.models.deletion.CASCADE, related_name='product_gtin_exemptions', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon GTIN Exemption',
                'verbose_name_plural': 'Amazon GTIN Exemptions',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonExternalProductId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('ASIN', 'ASIN'), ('UPC', 'UPC'), ('ISBN', 'ISBN'), ('GCID', 'GCID'), ('GTIN', 'GTIN'), ('JAN', 'JAN')], default='ASIN', max_length=4)),
                ('value', models.CharField(max_length=32)),
                ('created_asin', models.CharField(blank=True, max_length=32, null=True)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(help_text='The product this identifier belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='amazon_merchant_asins', to='products.product')),
                ('view', models.ForeignKey(help_text='Marketplace for this identifier.', on_delete=django.db.models.deletion.CASCADE, related_name='product_asins', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon External Product ID',
                'verbose_name_plural': 'Amazon External Product IDs',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonDefaultUnitConfigurator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255)),
                ('selected_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('choices', models.JSONField(blank=True, default=list)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='default_unit_configurators', to='sales_channels.saleschannel')),
                ('marketplace', models.ForeignKey(help_text='The Amazon marketplace for this value.', on_delete=django.db.models.deletion.CASCADE, to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Default Unit Configurator',
                'verbose_name_plural': 'Default Unit Configurators',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonCurrency',
            fields=[
                ('remotecurrency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sales_channels.remotecurrency')),
                ('sales_channel_view', models.ForeignKey(blank=True, help_text='The marketplace associated with this remote currency.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='remote_currencies', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('sales_channels.remotecurrency',),
        ),
        migrations.CreateModel(
            name='AmazonVariationTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('theme', models.CharField(max_length=64)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(help_text='The product this variation theme belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='amazon_variation_themes', to='products.product')),
                ('view', models.ForeignKey(help_text='Marketplace for this variation theme.', on_delete=django.db.models.deletion.CASCADE, related_name='product_variation_themes', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon Variation Theme',
                'verbose_name_plural': 'Amazon Variation Themes',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonBrowseNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(db_index=True, max_length=50)),
                ('marketplace_id', models.CharField(db_index=True, max_length=20)),
                ('name', models.CharField(blank=True, max_length=512, null=True)),
                ('context_name', models.CharField(blank=True, max_length=512, null=True)),
                ('has_children', models.BooleanField(default=False)),
                ('is_root', models.BooleanField(db_index=True, default=False)),
                # SQLite fallback: JSONField instead of ArrayField
                ('child_node_ids', models.JSONField(default=list, blank=True, help_text='Only populated if has_children is True')),
                ('browse_path_by_id', models.JSONField(default=list, blank=True, help_text='Full browsePathById chain')),
                ('browse_path_by_name', models.JSONField(default=list, blank=True, help_text='Full browsePathByName chain')),
                ('product_type_definitions', models.JSONField(default=list, blank=True)),

                ('path_depth', models.PositiveSmallIntegerField(default=0)),
                ('parent_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_nodes', to='amazon.amazonbrowsenode')),
            ],
            options={
                'indexes': [models.Index(fields=['marketplace_id'], name='amazon_amaz_marketp_630389_idx'), models.Index(fields=['path_depth'], name='amazon_amaz_path_de_61d913_idx')],
                'unique_together': {('remote_id', 'marketplace_id')},
            },
        ),
        migrations.CreateModel(
            name='AmazonImportRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_sku', models.CharField(max_length=255)),
                ('child_sku', models.CharField(max_length=255)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('import_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amazon_relationships', to='imports_exports.import')),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
            ],
            options={
                'verbose_name': 'Amazon Import Relationship',
                'verbose_name_plural': 'Amazon Import Relationships',
                'unique_together': {('import_process', 'parent_sku', 'child_sku')},
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonProductBrowseNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_browse_node_id', models.CharField(max_length=50)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
                ('view', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannelview')),
            ],
            options={
                'unique_together': {('product', 'view')},
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='amazonproducttype',
            constraint=models.UniqueConstraint(condition=models.Q(('local_instance__isnull', False)), fields=('local_instance', 'sales_channel'), name='unique_amazonproducttype_local_instance_sales_channel_not_null', violation_error_message='An Amazon product type with this local rule already exists for this sales channel.'),
        ),
        migrations.AddConstraint(
            model_name='amazonproducttype',
            constraint=models.UniqueConstraint(condition=models.Q(('product_type_code__isnull', False)), fields=('product_type_code', 'sales_channel'), name='unique_amazonproducttype_code_sales_channel_not_null', violation_error_message='An Amazon product type with this product type code already exists for this sales channel.'),
        ),
        migrations.AlterUniqueTogether(
            name='amazonproducttypeitem',
            unique_together={('local_instance', 'amazon_rule')},
        ),
        migrations.AlterUniqueTogether(
            name='amazonpropertyselectvalue',
            unique_together={('amazon_property', 'marketplace', 'remote_value')},
        ),
        migrations.AlterUniqueTogether(
            name='amazonimportdata',
            unique_together={('sales_channel', 'product', 'view')},
        ),
        migrations.AlterUniqueTogether(
            name='amazongtinexemption',
            unique_together={('product', 'view')},
        ),
        migrations.AlterUniqueTogether(
            name='amazonexternalproductid',
            unique_together={('product', 'view')},
        ),
        migrations.AlterUniqueTogether(
            name='amazondefaultunitconfigurator',
            unique_together={('sales_channel', 'marketplace', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='amazonvariationtheme',
            unique_together={('product', 'view')},
        ),
    ]
