# Generated by Django 5.2 on 2025-08-18 08:42

import core.models.core
import dirtyfields.dirtyfields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('amazon', '0055_remove_amazonproduct_asin_amazonmerchantasin_and_more'),
        ('core', '0009_alter_multitenantuser_avatar'),
        ('products', '0019_alter_producttranslation_unique_together_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AmazonGtinExemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.BooleanField(default=False)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(help_text='The product this exemption belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='amazon_gtin_exemptions', to='products.product')),
                ('view', models.ForeignKey(help_text='Marketplace for this exemption.', on_delete=django.db.models.deletion.CASCADE, related_name='product_gtin_exemptions', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon GTIN Exemption',
                'verbose_name_plural': 'Amazon GTIN Exemptions',
                'unique_together': {('product', 'view')},
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AmazonVariationTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('theme', models.CharField(max_length=64)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.ForeignKey(help_text='The product this variation theme belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='amazon_variation_themes', to='products.product')),
                ('view', models.ForeignKey(help_text='Marketplace for this variation theme.', on_delete=django.db.models.deletion.CASCADE, related_name='product_variation_themes', to='amazon.amazonsaleschannelview')),
            ],
            options={
                'verbose_name': 'Amazon Variation Theme',
                'verbose_name_plural': 'Amazon Variation Themes',
                'unique_together': {('product', 'view')},
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
    ]
