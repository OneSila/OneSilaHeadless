# Generated by Django 5.2 on 2025-09-16 18:58

import core.models.core
import dirtyfields.dirtyfields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0010_multitenantcompany_active_and_more'),
        ('ebay', '0004_marketplace_fields'),
        ('properties', '0016_alter_productpropertytexttranslation_language_and_more'),
        ('sales_channels', '0039_alter_remotelanguage_local_instance'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='ebayproperty',
            options={'verbose_name': 'eBay Property', 'verbose_name_plural': 'eBay Properties'},
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='allows_unmapped_values',
            field=models.BooleanField(default=False, help_text='Whether values outside eBay suggestions are accepted.'),
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='localized_name',
            field=models.CharField(blank=True, help_text='Localized aspect name as returned by eBay.', max_length=512, null=True),
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='marketplace',
            field=models.ForeignKey(default=1, help_text='Marketplace in which this aspect definition applies.', on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='ebay.ebaysaleschannelview'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='raw_data',
            field=models.JSONField(blank=True, default=dict, help_text='Original aspect metadata returned by eBay.'),
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='translated_name',
            field=models.CharField(blank=True, help_text='Aspect name translated into the company language.', max_length=512, null=True),
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='type',
            field=models.CharField(choices=[('INT', 'Integer'), ('FLOAT', 'Float'), ('TEXT', 'Text'), ('DESCRIPTION', 'Description'), ('BOOLEAN', 'Boolean'), ('DATE', 'Date'), ('DATETIME', 'Date time'), ('SELECT', 'Select'), ('MULTISELECT', 'Multi Select')], default='TEXT', help_text='Mapped internal property type for this aspect.', max_length=16),
        ),
        migrations.AddField(
            model_name='ebayproperty',
            name='value_format',
            field=models.CharField(blank=True, help_text='Format specification returned by eBay (aspectFormat).', max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='default_category_tree_id',
            field=models.CharField(blank=True, help_text='Default category tree ID for this marketplace.', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='fulfillment_policy_choices',
            field=models.JSONField(blank=True, default=list, help_text='List of fulfillment policies (as returned from eBay API).'),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='fulfillment_policy_id',
            field=models.CharField(blank=True, help_text='Selected Fulfillment Policy ID', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='merchant_location_choices',
            field=models.JSONField(blank=True, default=list, help_text='List of available inventory locations.'),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='merchant_location_key',
            field=models.CharField(blank=True, help_text='Selected inventory location key.', max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='payment_policy_choices',
            field=models.JSONField(blank=True, default=list, help_text='List of payment policies.'),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='payment_policy_id',
            field=models.CharField(blank=True, help_text='Selected Payment Policy ID', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='return_policy_choices',
            field=models.JSONField(blank=True, default=list, help_text='List of return policies.'),
        ),
        migrations.AddField(
            model_name='ebaysaleschannelview',
            name='return_policy_id',
            field=models.CharField(blank=True, help_text='Selected Return Policy ID', max_length=64, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='ebayproperty',
            unique_together={('marketplace', 'localized_name')},
        ),
        migrations.CreateModel(
            name='EbayProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(blank=True, help_text='ID of the object in the remote system', max_length=255, null=True)),
                ('successfully_created', models.BooleanField(default=True, help_text='Indicates if the object was successfully created in the remote system.')),
                ('outdated', models.BooleanField(default=False, help_text='Indicates if the remote product is outdated due to an error.')),
                ('outdated_since', models.DateTimeField(blank=True, help_text='Timestamp indicating when the object became outdated.', null=True)),
                ('name', models.CharField(blank=True, help_text='Localized category name from eBay.', max_length=255, null=True)),
                ('translated_name', models.CharField(blank=True, help_text='Category name translated into the company language.', max_length=255, null=True)),
                ('imported', models.BooleanField(default=True)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('local_instance', models.ForeignKey(help_text='Local product type rule associated with this category.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.productpropertiesrule')),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
            ],
            options={
                'verbose_name': 'eBay Product Type',
                'verbose_name_plural': 'eBay Product Types',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EbayProductTypeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remote_id', models.CharField(blank=True, help_text='ID of the object in the remote system', max_length=255, null=True)),
                ('successfully_created', models.BooleanField(default=True, help_text='Indicates if the object was successfully created in the remote system.')),
                ('outdated', models.BooleanField(default=False, help_text='Indicates if the remote product is outdated due to an error.')),
                ('outdated_since', models.DateTimeField(blank=True, help_text='Timestamp indicating when the object became outdated.', null=True)),
                ('remote_type', models.CharField(choices=[('REQUIRED_IN_CONFIGURATOR', 'Required in Configurator'), ('OPTIONAL_IN_CONFIGURATOR', 'Optional in Configurator'), ('REQUIRED', 'Required'), ('OPTIONAL', 'Optional')], help_text='Requirement level for this aspect in eBay.', max_length=32, null=True)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('local_instance', models.ForeignKey(help_text='Local product type rule item associated with this aspect.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='properties.productpropertiesruleitem')),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product_type', models.ForeignKey(help_text='eBay product type this aspect belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ebay.ebayproducttype')),
                ('remote_property', models.ForeignKey(help_text='eBay property associated with this product type item.', on_delete=django.db.models.deletion.CASCADE, related_name='product_type_items', to='ebay.ebayproperty')),
                ('sales_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_channels.saleschannel')),
            ],
            options={
                'verbose_name': 'eBay Product Type Item',
                'verbose_name_plural': 'eBay Product Type Items',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, core.models.core.GetAbsoluteURLMixin, models.Model),
        ),
        migrations.DeleteModel(
            name='EbayPropertySelectValue',
        ),
        migrations.AddConstraint(
            model_name='ebayproducttype',
            constraint=models.UniqueConstraint(condition=models.Q(('remote_id__isnull', False)), fields=('sales_channel', 'remote_id'), name='unique_ebayproducttype_remote_id_per_channel'),
        ),
        migrations.AddConstraint(
            model_name='ebayproducttype',
            constraint=models.UniqueConstraint(condition=models.Q(('local_instance__isnull', False)), fields=('sales_channel', 'local_instance'), name='unique_ebayproducttype_local_rule_per_channel'),
        ),
        migrations.AlterUniqueTogether(
            name='ebayproducttypeitem',
            unique_together={('local_instance', 'product_type')},
        ),
    ]
