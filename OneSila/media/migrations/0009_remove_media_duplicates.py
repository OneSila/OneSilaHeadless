# Generated by Django 5.1.1 on 2025-02-11 11:05
from django.db import migrations
from django.db import migrations, transaction
import hashlib


def set_image_hash_and_cleanup_duplicates(apps, schema_editor):
    Media = apps.get_model('media', 'Media')
    MediaProductThrough = apps.get_model('media', 'MediaProductThrough')

    # Step 1: Set image_hash for all IMAGE records that don't have it.
    images = Media.objects.filter(type='IMAGE')
    for image in images.iterator():
        # If image_hash is not set and there is an image file, compute it.
        if not image.image_hash and image.image:
            try:
                # Open the file in binary mode.
                with image.image.open('rb') as f:
                    content = f.read()
                # Compute SHA-256 hash from file content.
                hash_value = hashlib.sha256(content).hexdigest()
                image.image_hash = hash_value
                image.save(update_fields=['image_hash'])
            except Exception as e:
                # If the file cannot be opened/read, skip this record.
                continue

    # Step 2: Find duplicates based on multi_tenant_company and image_hash.
    # We'll group images (with a non-null image_hash) by (multi_tenant_company, image_hash).
    duplicate_groups = {}
    all_images = Media.objects.filter(type='IMAGE').exclude(image_hash__isnull=True)
    for image in all_images.iterator():
        key = (image.multi_tenant_company_id, image.image_hash)
        duplicate_groups.setdefault(key, []).append(image)

    # For each group with duplicates, choose one as primary and update references.
    for key, image_list in duplicate_groups.items():
        if len(image_list) > 1:
            # Sort by ID and pick the first as the primary image.
            image_list.sort(key=lambda x: x.id)
            primary = image_list[0]
            duplicates_to_remove = image_list[1:]

            # Update MediaProductThrough entries pointing to the duplicates.
            for dup in duplicates_to_remove:
                MediaProductThrough.objects.filter(media=dup).update(media=primary)

            # Delete the duplicate media records.
            for dup in duplicates_to_remove:
                dup.delete()

def reverse_func(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('media', '0008_media_image_hash'),
    ]

    operations = [
        migrations.RunPython(set_image_hash_and_cleanup_duplicates, reverse_func),
    ]
