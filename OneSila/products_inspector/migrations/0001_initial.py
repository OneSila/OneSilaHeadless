# Generated by Django 5.1.1 on 2025-02-25 10:57

import dirtyfields.dirtyfields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Inspector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('has_missing_information', models.BooleanField(default=True)),
                ('has_missing_optional_information', models.BooleanField(default=True)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                 related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                 related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inspector', to='products.product')),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InspectorBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('simple_product_applicability', models.CharField(choices=[('REQUIRED', 'Required'),
                 ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('configurable_product_applicability', models.CharField(choices=[
                 ('REQUIRED', 'Required'), ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('manufacturable_product_applicability', models.CharField(choices=[
                 ('REQUIRED', 'Required'), ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('bundle_product_applicability', models.CharField(choices=[('REQUIRED', 'Required'),
                 ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('dropship_product_applicability', models.CharField(choices=[('REQUIRED', 'Required'),
                 ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('supplier_product_applicability', models.CharField(choices=[('REQUIRED', 'Required'),
                 ('OPTIONAL', 'Optional'), ('NONE', 'None')], default='NONE', max_length=10)),
                ('error_code', models.IntegerField(choices=[(101, 'Product is missing required images'), (102, 'Product Missing Prices'), (104, 'Bundle Product has inactive items'), (105, 'Product is missing required variations'), (106, 'Bundle product is missing items'), (109, 'Product is missing an EAN code'), (110, 'Product is missing a required product type property'), (111, 'Product is missing required properties'), (112, 'Product is missing optional properties'), (
                    114, 'Product is active, missing stock, and does not allow backorder'), (116, 'Manual price list price should have at least override price'), (117, 'Variations do not have the same product type'), (118, 'Items do not have the same product type'), (120, 'Items have inspectors missing mandatory information'), (121, 'Variations have inspectors missing mandatory information'), (123, 'Configurable product has duplicate variations'), (124, 'Configurable product has no applicable configurator rules')])),
                ('successfully_checked', models.BooleanField(default=False)),
                ('created_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                 related_name='%(class)s_created_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks', to='products_inspector.inspector')),
                ('last_update_by_multi_tenant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                 related_name='%(class)s_last_update_by_multi_tenant_user_set', to=settings.AUTH_USER_MODEL)),
                ('multi_tenant_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.multitenantcompany')),
            ],
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DuplicateVariationsInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Duplicate Variations',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='InspectorBlockHasImages',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Has Images',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='InspectorBlockInactiveBundleItems',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Inactive Bundle Items',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='InspectorBlockMissingBundleItems',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Bundle Items',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='InspectorBlockMissingPrices',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Prices',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='InspectorBlockMissingVariation',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Variations',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='ItemsMismatchProductTypeInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Items Mismatch Product Type',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='ItemsMissingMandatoryInformationInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Items Missing Mandatory Information',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingEanCodeInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing EAN Code',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingManualPriceListOverrideInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Manual Price List Override',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingOptionalPropertiesInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Optional Properties',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingProductTypeInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Product Type',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingRequiredPropertiesInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Required Properties',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='MissingStockInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Missing Stock',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='NonConfigurableRuleInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Non-Configurable Rule',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='VariationMismatchProductTypeInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Variation Mismatch Product Type',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.CreateModel(
            name='VariationsMissingMandatoryInformationInspectorBlock',
            fields=[
            ],
            options={
                'verbose_name': 'Inspector Block Variations Missing Mandatory Information',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('products_inspector.inspectorblock',),
        ),
        migrations.AddIndex(
            model_name='inspector',
            index=models.Index(fields=['product'], name='products_in_product_b90206_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectorblock',
            index=models.Index(fields=['inspector'], name='products_in_inspect_6eba5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inspectorblock',
            unique_together={('inspector', 'error_code')},
        ),
    ]
